const patternTypes = ["pattern0", "pattern1", "pattern2", "pattern3", "pattern4", "pattern5", "pattern6"];
function appendFilterAndPattern(svg) {
    const defs = svg.append("defs")
    defs.append("pattern")
        .attr('id', patternTypes[0])
        .attr("width", 10)
        .attr("height", 10)
        .attr('patternUnits',"userSpaceOnUse")
        .append('rect')
        .attr('fill','none')
        .attr('stroke','#119eb9')
        .attr('stroke-width', 3)
        .attr('width', '100%')
        .attr('height', '100%')
    
    defs.append("pattern")
        .attr('id', patternTypes[1])
        .attr("width", 10)
        .attr("height", 10)
        .attr('patternUnits',"userSpaceOnUse")
        .append('rect')
        .attr('fill','none')
        .attr('stroke','#119eb9')
        .attr('stroke-width', 2)
        .attr('width', '100%')
        .attr('height', '100%')
        .attr('transform', 'rotate(45)')
    defs.append("pattern")
        .attr('id', patternTypes[2])
        .attr("width", 10)
        .attr("height", 10)
        .attr('patternUnits',"userSpaceOnUse")
        .append('path')        
        .attr('stroke','#119eb9')
        .attr('stroke-width', 2)
        .attr('fill','none')
        .attr("d", 'M0,0L5,5L10,0L5,5L0,0Z')

    let cross = defs.append("pattern")
        .attr('id', patternTypes[3])
        .attr("width", 10)
        .attr("height", 10)
        .attr('patternUnits',"userSpaceOnUse");
    cross.append('path')        
        .attr('stroke','#119eb9')
        .attr('stroke-width', 2)
        .attr('fill','none')
        .attr("d", 'M0,0L10,10')
    cross.append('path')        
        .attr('stroke','#119eb9')
        .attr('stroke-width', 2)
        .attr('fill','none')
        .attr("d", 'M10,0L0,10')

    defs.append("pattern")
        .attr('id', patternTypes[4])
        .attr("width", 10)
        .attr("height", 10)
        .attr('patternUnits',"userSpaceOnUse")
        .append('path')
        .attr('fill','#119eb9')
        .attr("d", 'M0,0L10,10L10,0L0,10Z')

    let dot = defs.append("pattern")
        .attr('id', patternTypes[5])
        .attr("width", 10)
        .attr("height", 10)
        .attr('patternUnits',"userSpaceOnUse");
    dot.append('circle')
        .attr('fill','#119eb9')
        .attr('cx', -5)
        .attr('cy', 0)
        .attr('r', 2)
    dot.append('circle')
        .attr('fill','#119eb9')
        .attr('cx', 5)
        .attr('cy', 0)
        .attr('r', 2)
    dot.append('circle')
        .attr('fill','#119eb9')
        .attr('cx', 0)
        .attr('cy', -5)
        .attr('r', 2)
    dot.append('circle')
        .attr('fill','#119eb9')
        .attr('cx', 0)
        .attr('cy', 5)
        .attr('r', 2)
    
    let dotFill = defs.append("pattern")
        .attr('id', patternTypes[6])
        .attr("width", 5)
        .attr("height", 5)
        .attr('patternUnits',"userSpaceOnUse");
    dotFill.append('path')
        .attr('fill','#119eb9')
        .attr("d", 'M-10,0L0,10L10,0L0,-10z')
    dotFill.append('circle')
        .attr('fill','white')
        .attr('cx', -5)
        .attr('cy', 0)
        .attr('r', 2)
    dotFill.append('circle')
        .attr('fill','white')
        .attr('cx', 5)
        .attr('cy', 0)
        .attr('r', 2)
    dotFill.append('circle')
        .attr('fill','white')
        .attr('cx', 0)
        .attr('cy', -5)
        .attr('r', 2)
    dotFill.append('circle')
        .attr('fill','white')
        .attr('cx', 0)
        .attr('cy', 5)
        .attr('r', 2)
  
    const filter = defs.append("filter")
        .attr("id", "drop-shadow")
        .attr("height", "500%");
    filter.append("feGaussianBlur")
        .attr("in", "SourceAlpha")
        .attr("stdDeviation", 13)
        .attr("result", "blur");

    filter.append("feOffset")
        .attr("in", "blur")
        .attr("dy", 8.1)
        .attr("result", "offsetBlur");
    const feMerge = filter.append("feMerge")
    feMerge.append("feMergeNode")
        .attr("in", "offsetBlur")
    feMerge.append("feMergeNode")
        .attr("in", "SourceGraphic");    
    return svg;            
}
